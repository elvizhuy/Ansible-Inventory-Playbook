---
- name: Install Postgresql
  hosts: database_postgresql
  gather_facts: true
  become: true
  vars_files:
      - vars.yml

  pre_tasks:
      - name: Add pgdg repo to sources.list.d
        lineinfile:
          path: /etc/apt/sources.list.d/pgdg.list
          line: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
          create: true

      - name: Download PostgreSQL key and add it to system keyring
        apt_key:
          url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
          state: present

      - name: Update apt cache
        apt:
          update_cache: yes

      - name: "Install packages"
        dnf: "name={{ item }} state=present"
        with_items:
          - postgresql14
          - postgresql14-server
          - postgresql14-contrib
          - postgresql14-devel
          - postgresql14-libs

      - name: "Install Python packages"
        pip: "name={{ item }}  state=present"
        with_items:
          - psycopg2-binary

  tasks:
      - name: "Find out if PostgreSQL is initialized"
        ansible.builtin.stat:
          path: "/var/lib/pgsql/data/pg_hba.conf"
        register: postgres_data

      - name: "Initialize PostgreSQL"
        shell: "postgresql-14-setup initdb"
        when: not postgres_data.stat.exists

      - name: "Start and enable services"
        service: "name={{ item }} state=started enabled=yes"
        with_items:
          - postgresql-14


#==================================== Create database,user ====================================

      - name: "Create app database"
        postgresql_db:
          state: present
          name: "{{ postgresql_db_name }}"
        become: yes
        become_user: postgres

      - name: "Create db user"
        postgresql_user:
          state: present
          name: "{{ postgresql_user }}"
          password: "{{ postgresql_password }}"
        become: yes
        become_user: postgres

      - name: "Grant db user access to app db"
        postgresql_privs:
          type: database
          database: "{{ postgresql_db_name }}"
          roles: "{{ postgresql_user }}"
          grant_option: no
          privs: all
        become: yes
        become_user: postgres

      - name: Allow md5 connection for the db user
        hosts: databases
        become: yes
        become_user: postgres
        tasks:
          - name: Allow md5 connection for the db user in pg_hba.conf
            postgresql_pg_hba:
              dest: "/var/lib/pgsql/14/data/pg_hba.conf"
              contype: host
              databases: all
              method: md5
              users: "{{ postgresql_user }}"
              create: true
            notify: restart postgres

      - name: Add trust connection for the db user
        hosts: databases
        become: yes
        become_user: postgres
        tasks:
          - name: Add trust connection for the db user in pg_hba.conf
            blockinfile:
              dest: "/var/lib/pgsql/14/data/pg_hba.conf"
              insertafter: "# TYPE  DATABASE        USER            ADDRESS                 METHOD"
              block: |
                host   all             all                trust
            notify: restart postgres


#==================================== Migrate data ====================================

      - name: "Load SQL script into a variable"
        set_fact:
          migration_sql: "{{ lookup('file', 'tmp/migration.sql') }}"

      - name: "Execute script from variable"
        become_user: postgres
#          command: "psql {{ postgresql_db_name }} -c {{ migration_sql }}"
        shell: psql {{ postgresql_db_name }} < {{ migration_sql }}
        register: sql_response_variable

#==================================== Restart service ====================================
  handlers:
      - name: restart postgres
        service: name=postgresql state=restarted
